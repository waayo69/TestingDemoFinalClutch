@model IEnumerable<TestingDemo.Models.ClientModel>
@{
    ViewData["Title"] = "Document Officer Dashboard";
}
<div class="container-fluid py-4">
    <div class="row mb-4 align-items-center">
        <div class="col-12 col-md-6 mb-2 mb-md-0">
            <h2 class="fw-bold mb-0"><i class="bi bi-folder-check"></i> Document Officer Dashboard</h2>
        </div>
        <div class="col-12 col-md-6 d-flex flex-wrap justify-content-md-end align-items-center gap-2">
            <a asp-controller="Archive" asp-action="Index" class="btn btn-outline-secondary">
                <i class="bi bi-archive-fill"></i> View Client Archive
            </a>
        </div>
    </div>
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle-fill"></i> @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    <div class="card shadow">
        <div class="card-header bg-light py-2">
            <h5 class="mb-0"><i class="bi bi-list-ul"></i> Clients for Document Officer</h5>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover table-striped align-middle mb-0">
                    <thead class="table-light">
                        <tr>
                            <th scope="col">Client</th>
                            <th scope="col">Contact</th>
                            <th scope="col">Permit Type</th>
                            <th scope="col">Status</th>
                            <th scope="col" class="text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td class="fw-bold">@item.ClientName</td>
                                <td>@item.ContactPersonNumber</td>
                                <td>@item.TypeOfProject</td>
                                <td><span class="badge bg-info">@item.Status</span></td>
                                <td class="text-center">
                                    <div class="btn-group btn-group-sm" role="group">
                                        <button type="button" class="btn btn-info" data-bs-toggle="modal"
                                            data-bs-target="#docClientModal-@item.Id" title="View Details">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                        <button type="button" class="btn btn-success done-btn" data-client-id="@item.Id"
                                            data-client-name="@item.ClientName"
                                            title="Done Documenting (Proceed to Finance)">
                                            <i class="bi bi-check-circle"></i> Done
                                        </button>
                                        <form asp-action="ProceedToFinance" asp-route-id="@item.Id" method="post"
                                            class="d-none done-form" id="doneForm-@item.Id"></form>
                                        <form asp-action="ReturnToCustomerCare" asp-route-id="@item.Id" method="post"
                                            style="display:inline;"
                                            onsubmit="return confirm('Return this client to Customer Care (Liaison)?');">
                                            <button type="submit" class="btn btn-warning"
                                                title="Return to Customer Care (Liaison)">
                                                <i class="bi bi-arrow-counterclockwise"></i>
                                            </button>
                                        </form>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
@* Client Details Modals *@
@foreach (var item in Model)
{
    @await Html.PartialAsync("_ClientDetailsModal", item)
}
<!-- Done Confirmation Modal -->
<div class="modal fade" id="doneModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Adjustment Notification</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to mark <strong id="doneClientName"></strong> as done? This will notify the
                    adjustment and proceed to Finance.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" id="confirmDoneBtn">Yes, Proceed</button>
            </div>
        </div>
    </div>
</div>
<audio id="notifySound" src="/sounds/Notifications.wav" preload="auto"></audio>
@section Scripts {
    <script>
        // Load requirements into modal when opened
        document.addEventListener('shown.bs.modal', function (event) {
            var modal = event.target;
            if (!modal || !modal.id || !modal.id.startsWith('docClientModal-')) return;
            var clientId = modal.id.replace('docClientModal-', '');
            var targetElement = modal.querySelector('#req-list-' + clientId);
            if (!targetElement) return;
            var url = '/PlanningOfficer/Requirements/' + clientId + '?readOnly=true&t=' + Date.now();
            fetch(url, {
                cache: 'no-store',
                headers: { 'X-Requested-With': 'XMLHttpRequest' }
            })
                .then(function (response) { if (!response.ok) throw new Error('Network response was not ok'); return response.text(); })
                .then(function (html) { targetElement.innerHTML = html; })
                .catch(function () { targetElement.innerHTML = '<div class="alert alert-warning">Failed to load requirements.</div>'; });
        });
        document.addEventListener('DOMContentLoaded', function () {
            var doneModal = new bootstrap.Modal(document.getElementById('doneModal'));
            var clientIdToSubmit = null;
            document.querySelectorAll('.done-btn').forEach(function (btn) {
                btn.addEventListener('click', function () {
                    clientIdToSubmit = btn.getAttribute('data-client-id');
                    var clientName = btn.getAttribute('data-client-name');
                    document.getElementById('doneClientName').textContent = clientName;
                    doneModal.show();
                });
            });
            document.getElementById('confirmDoneBtn').addEventListener('click', function () {
                if (clientIdToSubmit) {
                    document.getElementById('doneForm-' + clientIdToSubmit).submit();
                    doneModal.hide();
                }
            });
        });
        // Store initial client IDs for Document Officer table
        let docOfficerClientIds = Array.from(document.querySelectorAll('tbody tr')).map(row => row.querySelector('.done-btn')?.getAttribute('data-client-id')).filter(Boolean);
        function playNotifySound() {
            var audio = document.getElementById('notifySound');
            if (audio) {
                audio.currentTime = 0;
                audio.play();
            }
        }
        function renderDocumentOfficer(data) {
            let newIds = (data || []).map(c => c.id?.toString());
            let isNew = newIds.some(id => !docOfficerClientIds.includes(id));
            if (isNew) {
                playNotifySound();
            }
            location.reload();
        }
        if (window.connection) {
            connection.on("ReceiveUpdate", function (message) {
                fetch('/DocumentOfficer/GetLatestData')
                    .then(response => response.json())
                    .then(data => {
                        renderDocumentOfficer(data);
                    });
            });
        }
    </script>
}