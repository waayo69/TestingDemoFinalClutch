@model List<TestingDemo.Models.ClientModel>

@{
    ViewData["Title"] = "Client Monitoring Dashboard";
}

<style>
    /* Minimalist Layout */
    .dashboard-container {
        padding: 30px;
        font-family: 'Segoe UI', sans-serif;
        color: #333;
    }

    .dashboard-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 25px;
    }

        .dashboard-header h2 {
            font-weight: 600;
            margin: 0;
        }

        .dashboard-header p {
            color: #777;
            margin: 2px 0 0;
            font-size: 14px;
        }

    /* Stats section */
    .stats-container {
        display: flex;
        gap: 20px;
        margin-bottom: 25px;
    }

    .stat-box {
        flex: 1;
        background: #f8f9fa;
        border-radius: 10px;
        padding: 15px;
        text-align: center;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }

        .stat-box h5 {
            font-size: 14px;
            color: #555;
            margin-bottom: 5px;
        }

        .stat-box .count {
            font-size: 26px;
            font-weight: bold;
            color: #333;
        }

    /* Table */
    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 15px;
    }

    thead {
        background: #f4f4f4;
    }

    th, td {
        padding: 12px 10px;
        border-bottom: 1px solid #ddd;
        text-align: left;
        vertical-align: middle;
    }

    tbody tr:hover {
        background: #f9f9f9;
    }

    /* Badges */
    .badge {
        display: inline-block;
        padding: 4px 10px;
        border-radius: 8px;
        font-size: 12px;
        font-weight: 500;
    }

    .bg-success {
        background: #d1f7d1;
        color: #ffffff;
    }

    .bg-warning {
        background: #fff3cd;
        color: #ffffff;
    }

    .bg-danger {
        background: #f8d7da;
        color: #ffffff;
    }

    .bg-secondary {
        background: #e2e3e5;
        color: #fff;
    }

    /* Search */
    .search-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

        .search-container input {
            padding: 6px 10px;
            border: 1px solid #ccc;
            border-radius: 20px;
            outline: none;
            width: 200px;
        }

    .alert {
        margin-top: 15px;
        padding: 10px 15px;
        border-radius: 8px;
    }

    .alert-success {
        background: #d1f7d1;
        color: #155724;
    }

    .alert-info {
        background: #d1ecf1;
        color: #0c5460;
    }
</style>

<div class="dashboard-container">
    <!-- Header -->
    <div class="dashboard-header">
        <div>
            <h2><i class="bi bi-people-fill me-2"></i>@ViewData["Title"]</h2>

        </div>
        <div>
            <button class="btn btn-primary rounded-pill px-3" onclick="location.reload()">
                <i class="bi bi-arrow-clockwise me-1"></i> Refresh
            </button>
            <button class="btn btn-outline-secondary rounded-pill px-3" onclick="viewArchivedClients()">
                <i class="bi bi-archive me-1"></i> View Archived
            </button>
        </div>
    </div>

    <!-- Success Message -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">
            <i class="bi bi-check-circle-fill me-2"></i>@TempData["SuccessMessage"]
        </div>
    }

    <!-- Stats -->
    <div class="stats-container">
        <div class="stat-box">
            <div class="stat-content">
                <i class="bi bi-clock"></i>
                <h3 class="stat-number">@Model.Count</h3>
                <p class="stat-label">Total Active Clients</p>
            </div>
        </div>
        <div class="stat-box">
            <i class="bi bi-hourglass-split fs-4 text-warning"></i>
            <h3 class="stat-number">@Model.Count(c => c.Status == "Pending")</h3>
            <p class="stat-label1">Pending</p>
        </div>
        <div class="stat-box">
            <i class="bi bi-gear-fill fs-4 text-info"></i>
            <h3 class="stat-number">@Model.Count(c => c.Status != "Pending")</h3>
            <p class="stat-label">In Progress</p>
        </div>
        <div class="stat-box">
            <i class="bi bi-check-circle fs-4 text-success"></i>
            <h3 class="stat-number">@Model.Count(c => c.Status == "Clearance")</h3>
            <p class="stat-label">Completed</p>
        </div>
    </div>
</div>

<!-- Search -->
<div class="search-container">
    <form method="get">
        <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" placeholder="Search by name..." />
        <button type="submit" class="btn btn-primary btn-sm rounded-pill ms-2">
            <i class="bi bi-search"></i>
        </button>
        @if (!string.IsNullOrEmpty(ViewData["CurrentFilter"]?.ToString()))
        {
            <a href="@Url.Action("Clients")" class="btn btn-outline-secondary btn-sm rounded-pill ms-1">
                <i class="bi bi-x-circle me-1"></i>Clear
            </a>
        }
    </form>
</div>

<!-- Table -->
@if (Model != null && Model.Any())
{
    <table>
        <thead>
            <tr>
                <th>Client Name</th>
                <th>Permit Type</th>
                <th>Status</th>
                <th>Priority</th>
                <th>Created Date</th>
                <th class="text-center">Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var client in Model)
            {
                <tr>
                    <td>
                        <div class="fw-medium">@client.ClientName</div>
                        <div class="text-muted small">@client.Email</div>
                    </td>
                    <td>@client.TypeOfProject</td>
                    <td><span class="badge bg-success">@client.Status</span></td>
                    <td>
                        <span class="badge @(client.UrgencyLevel == "Urgent" ? "bg-danger" : client.UrgencyLevel == "Slightly Urgent" ? "bg-warning" : "bg-secondary")">
                            @client.UrgencyLevel
                        </span>
                    </td>
                    <td>@client.CreatedDate.ToString("MMM dd, yyyy")</td>
                    <td class="text-center">
                        <!-- kept exactly as original: pass Id as string to JS -->
                        <button class="btn btn-primary btn-sm w-100" onclick="viewClientDetails('@client.Id')">
                            <i class="bi bi-eye me-1"></i> View Details
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="alert alert-info">
        <i class="bi bi-info-circle me-2"></i>No clients found.
    </div>
}
</div>

<!-- MODAL FOR CLIENT DETAILS (kept minimal-lg like your original) -->
<div class="modal fade" id="clientDetailsModal" tabindex="-1" aria-labelledby="clientDetailsLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content border-0 shadow">
            <div class="modal-header bg-light">
                <h5 class="modal-title">
                    <span id="modalClientName"></span>
                    <small id="modalProjectType" class="text-muted ms-2"></small>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="clientDetailsContent">
                <p class="text-center text-muted">Loading client details...</p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function viewArchivedClients() {
            window.location.href = '/Archive';
        }

        /* Utility badge class mappers (used in modal generation) */
        function getUrgencyBadgeClass(level) {
            switch (level) {
                case 'Urgent': return 'bg-danger';
                case 'Slightly Urgent': return 'bg-warning';
                case 'High': return 'bg-danger';
                case 'Normal': return 'bg-warning';
                case 'Low': return 'bg-success';
                default: return 'bg-secondary';
            }
        }

        function getStatusBadgeClass(status) {
            switch (status) {
                case 'Active': return 'bg-success';
                case 'Pending': return 'bg-warning';
                case 'In Progress': return 'bg-info';
                case 'Planning': return 'bg-info';
                case 'Finance': return 'bg-primary';
                default: return 'bg-secondary';
            }
        }

        /* MAIN: fetch details and populate modal (uses same property names as your model) */
        function viewClientDetails(clientId) {
            fetch(`/Admin/GetClientDetails/${clientId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch client details');
                    }
                    return response.json();
                })
                .then(client => {
                    if (!client) {
                        alert('No details found for this client.');
                        return;
                    }

                    // modal title/subtitle
                    document.getElementById('modalClientName').textContent = client.clientName || 'Unnamed Client';
                    document.getElementById('modalProjectType').textContent = client.typeOfProject || 'N/A';

                    // Build content (uses camelCase fields from JSON; server likely serializes to camelCase)
                    const content = `
                        <div class="row">
                            <div class="col-md-6">
                                <h6 class="text-primary"><i class="bi bi-info-circle"></i> Basic Information</h6>
                                <table class="table table-borderless">
                                    <tr><td><strong>Tracking Number:</strong></td><td><span class="badge bg-secondary">${client.trackingNumber || 'N/A'}</span></td></tr>
                                    <tr><td><strong>Client Name:</strong></td><td>${client.clientName || 'N/A'}</td></tr>
                                    <tr><td><strong>Requesting Party:</strong></td><td>${client.requestingParty || 'N/A'}</td></tr>
                                    <tr><td><strong>Requestor Name:</strong></td><td>${client.requestorName || 'N/A'}</td></tr>
                                    <tr><td><strong>Client Type:</strong></td><td>${client.clientType || 'N/A'}</td></tr>
                                    <tr><td><strong>Tax ID:</strong></td><td>${client.taxId || 'N/A'}</td></tr>
                                </table>
                            </div>
                            <div class="col-md-6">
                                <h6 class="text-primary"><i class="bi bi-building"></i> Company Information</h6>
                                <table class="table table-borderless">
                                    <tr><td><strong>Company Name:</strong></td><td>${client.registeredCompanyName || 'N/A'}</td></tr>
                                    <tr><td><strong>Company Address:</strong></td><td>${client.registeredCompanyAddress || 'N/A'}</td></tr>
                                    <tr><td><strong>Contact Number:</strong></td><td>${client.contactPersonNumber || client.contactPersonNumber || 'N/A'}</td></tr>
                                    <tr><td><strong>Contact Email:</strong></td><td>${client.contactPersonEmailAddress || 'N/A'}</td></tr>
                                </table>
                            </div>
                        </div>

                        <hr>

                        <div class="row">
                            <div class="col-md-6">
                                <h6 class="text-primary"><i class="bi bi-project-diagram"></i> Project Information</h6>
                                <table class="table table-borderless">
                                    <tr><td><strong>Project Type:</strong></td><td>${client.typeOfProject || 'N/A'}</td></tr>
                                    <tr><td><strong>Other Project Type:</strong></td><td>${client.otherTypeOfProject || 'N/A'}</td></tr>
                                    <tr><td><strong>Urgency Level:</strong></td><td><span class="badge ${getUrgencyBadgeClass(client.urgencyLevel || client.UrgencyLevel)}">${client.urgencyLevel || client.UrgencyLevel || 'N/A'}</span></td></tr>
                                    <tr><td><strong>Current Status:</strong></td><td><span class="badge ${getStatusBadgeClass(client.status || client.Status)}">${client.status || client.Status || 'N/A'}</span></td></tr>
                                    <tr><td><strong>Created Date:</strong></td><td>${client.createdDate || client.createdDate || 'N/A'}</td></tr>
                                </table>
                            </div>
                            <div class="col-md-6">
                                <h6 class="text-primary"><i class="bi bi-sticky"></i> Additional Information</h6>
                                <table class="table table-borderless">
                                    <tr><td><strong>Other Requesting Party:</strong></td><td>${client.otherRequestingParty || 'N/A'}</td></tr>
                                    <tr><td><strong>Planning Return Note:</strong></td><td>${client.planningReturnNote || 'N/A'}</td></tr>
                                </table>
                            </div>
                        </div>

                        ${getProjectSpecificDetails(client)}
                        ${getRequirementsDetails(client.requirements || client.Requirements || [])}
                    `;

                    document.getElementById('clientDetailsContent').innerHTML = content;
                    const modal = new bootstrap.Modal(document.getElementById('clientDetailsModal'));
                    modal.show();
                })
                .catch(error => {
                    console.error('Error loading client details:', error);
                    alert('Failed to load client details. Please try again.');
                });
        }

        /* Build project-specific sections from nested objects returned by API */
        function getProjectSpecificDetails(client) {
            let details = '<hr><div class="row"><div class="col-12"><h6 class="text-primary"><i class="bi bi-file-earmark-text"></i> Project-Specific Details</h6>';

            // The JSON may have camelCase or PascalCase -- check for both
            const bir = client.retainershipBIR || client.RetainershipBIR;
            const spp = client.retainershipSPP || client.RetainershipSPP;
            const oneTime = client.oneTimeTransaction || client.OneTimeTransaction;
            const external = client.externalAudit || client.ExternalAudit;

            if (bir) {
                details += '<div class="alert alert-info"><strong>Retainership BIR Details:</strong><br>';
                details += `<strong>Type of Registrant:</strong> ${bir.typeOfRegistrant || bir.TypeOfRegistrant || 'N/A'}<br>`;
                details += `<strong>OCN Notes:</strong> ${bir.ocnNotes || bir.OcnNotes || 'N/A'}<br>`;
                details += `<strong>Date OCN Generated:</strong> ${bir.dateOCNGenerated || bir.DateOCNGenerated || 'N/A'}<br>`;
                details += `<strong>Date BIR Registration:</strong> ${bir.dateBIRRegistration || bir.DateBIRRegistration || 'N/A'}<br>`;
                details += `<strong>BIR RDO No:</strong> ${bir.birRdoNo || bir.BirRdoNo || 'N/A'}<br>`;
                details += `<strong>Tax Filing Status:</strong> ${bir.taxFilingStatus || bir.TaxFilingStatus || 'N/A'}<br>`;
                details += `<strong>Need Catch-Up Accounting:</strong> ${bir.needCatchUpAccounting || bir.NeedCatchUpAccounting || 'N/A'}<br>`;
                details += `<strong>Retainership Start Date:</strong> ${bir.birRetainershipStartDate || bir.BirRetainershipStartDate || 'N/A'}`;
                details += '</div>';
            }

            if (spp) {
                details += '<div class="alert alert-info"><strong>Retainership SPP Details:</strong><br>';
                details += `<strong>SSS Reg No:</strong> ${spp.sssCompanyRegNo || spp.SssCompanyRegNo || 'N/A'}<br>`;
                details += `<strong>SSS Reg Date:</strong> ${spp.sssRegistrationDate || spp.SssRegistrationDate || 'N/A'}<br>`;
                details += `<strong>PHIC Reg No:</strong> ${spp.phicCompanyRegNo || spp.PhicCompanyRegNo || 'N/A'}<br>`;
                details += `<strong>PHIC Reg Date:</strong> ${spp.phicRegistrationDate || spp.PhicRegistrationDate || 'N/A'}<br>`;
                details += `<strong>HDMF Reg No:</strong> ${spp.hdmfCompanyRegNo || spp.HdmfCompanyRegNo || 'N/A'}<br>`;
                details += `<strong>HDMF Reg Date:</strong> ${spp.hdmfRegistrationDate || spp.HdmfRegistrationDate || 'N/A'}<br>`;
                details += `<strong>Retainership Start Date:</strong> ${spp.sppRetainershipStartDate || spp.SppRetainershipStartDate || 'N/A'}`;
                details += '</div>';
            }

            if (oneTime) {
                details += '<div class="alert alert-info"><strong>One-Time Transaction Details:</strong><br>';
                details += `<strong>Type of Registrant:</strong> ${oneTime.typeOfRegistrant || oneTime.TypeOfRegistrant || 'N/A'}<br>`;
                details += `<strong>Area of Services:</strong> ${oneTime.areaOfServices || oneTime.AreaOfServices || 'N/A'}<br>`;
                details += `<strong>Other Area of Services:</strong> ${oneTime.otherAreaOfServices || oneTime.OtherAreaOfServices || 'N/A'}`;
                details += '</div>';
            }

            if (external) {
                details += '<div class="alert alert-info"><strong>External Audit Details:</strong><br>';
                details += `<strong>Audit Status:</strong> ${external.externalAuditStatus || external.ExternalAuditStatus || 'N/A'}<br>`;
                details += `<strong>Purposes:</strong> ${external.externalAuditPurposes || external.ExternalAuditPurposes || 'N/A'}<br>`;
                details += `<strong>Other Purpose:</strong> ${external.externalAuditOtherPurpose || external.ExternalAuditOtherPurpose || 'N/A'}<br>`;
                details += `<strong>Report Date:</strong> ${external.externalAuditReportDate || external.ExternalAuditReportDate || 'N/A'}`;
                details += '</div>';
            }

            if (!bir && !spp && !oneTime && !external) {
                details += '<div class="alert alert-warning">No additional project-specific details available</div>';
            }

            details += '</div></div>';
            return details;
        }

        /* Build requirements table for modal */
        function getRequirementsDetails(requirements) {
            // expecting an array of requirements -- try to guard against PascalCase/camelCase shape variety
            if (!requirements || requirements.length === 0) {
                return '<hr><div class="row"><div class="col-12"><h6 class="text-primary"><i class="bi bi-list-check"></i> Permit Requirements</h6><div class="alert alert-warning">No requirements found for this client.</div></div></div>';
            }

            let details = '<hr><div class="row"><div class="col-12"><h6 class="text-primary"><i class="bi bi-list-check"></i> Permit Requirements</h6>';
            details += '<div class="table-responsive"><table class="table table-striped table-hover">';
            details += '<thead class="table-dark"><tr><th>Requirement Name</th><th>Description</th><th>Required</th><th>Completed</th><th>Present</th><th>Created Date</th></tr></thead><tbody>';

            // iterate array
            requirements.forEach(req => {
                // normalize possible casing
                const name = req.requirementName || req.RequirementName || req.name || 'N/A';
                const description = req.description || req.Description || '';
                const isRequired = (typeof req.isRequired !== 'undefined') ? req.isRequired : (req.IsRequired || false);
                const isCompleted = (typeof req.isCompleted !== 'undefined') ? req.isCompleted : (req.IsCompleted || false);
                const isPresent = (typeof req.isPresent !== 'undefined') ? req.isPresent : (req.IsPresent || false);
                const createdDate = req.createdDate || req.CreatedDate || '';

                const requiredBadge = isRequired ? '<span class="badge bg-danger">Required</span>' : '<span class="badge bg-secondary">Optional</span>';
                const completedBadge = isCompleted ? '<span class="badge bg-success">Yes</span>' : '<span class="badge bg-warning">No</span>';
                const presentBadge = isPresent ? '<span class="badge bg-success">Yes</span>' : '<span class="badge bg-warning">No</span>';

                details += `<tr>
                                <td><strong>${name}</strong></td>
                                <td>${description}</td>
                                <td>${requiredBadge}</td>
                                <td>${completedBadge}</td>
                                <td>${presentBadge}</td>
                                <td>${createdDate}</td>
                            </tr>`;
            });

            details += '</tbody></table></div></div></div>';
            return details;
        }

        /* Optional helpers used elsewhere (not altering UI) */
        function applyFilters() {
            // placeholder left intentionally - original UX does not require changes here
        }

        function refreshTable() {
            location.reload();
        }
    </script>
}
